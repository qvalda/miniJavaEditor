package tokenizer

import java.awt.Color

enum class TokenType {
    NotDefined,
    EOF,
    InvalidSyntax,

    Whitespace,
    NewLine,
    Comment,
    NameIdentifier,

    BracketRoundOpen,
    BracketRoundClose,
    BracketSquareOpen,
    BracketSquareClose,
    BracketCurlyOpen,
    BracketCurlyClose,

    SymbolDot,
    SymbolComma,
    SymbolSemicolon,
    SymbolColon,

    OperatorEquals,
    OperatorNotEquals,
    OperatorLessOrEqual,
    OperatorMoreOrEqual,
    OperatorDecrement,
    OperatorIncrement,
    OperatorMinusAssign,
    OperatorPlusAssign,
    OperatorMultAssign,
    OperatorDivAssign,
    OperatorAnd,
    OperatorOr,
    OperatorNot,
    OperatorAssign,
    OperatorLess,
    OperatorMore,
    OperatorPlus,
    OperatorMinus,
    OperatorDiv,
    OperatorMult,

    LiteralString,
    LiteralNumber,
    LiteralChar,
    LiteralTrue,
    LiteralFalse,
    LiteralNull,

    KeyWordAbstract,
    KeyWordContinue,
    KeyWordFor,
    KeyWordNew,
    KeyWordSwitch,
    KeyWordAssert,
    KeyWordDefault,
    KeyWordGoto,
    KeyWordPackage,
    KeyWordSynchronized,
    KeyWordBoolean,
    KeyWordDo,
    KeyWordIf,
    KeyWordPrivate,
    KeyWordThis,
    KeyWordBreak,
    KeyWordDouble,
    KeyWordImplements,
    KeyWordProtected,
    KeyWordThrow,
    KeyWordByte,
    KeyWordElse,
    KeyWordImport,
    KeyWordPublic,
    KeyWordThrows,
    KeyWordCase,
    KeyWordEnum,
    KeyWordInstanceof,
    KeyWordReturn,
    KeyWordTransient,
    KeyWordCatch,
    KeyWordExtends,
    KeyWordInt,
    KeyWordShort,
    KeyWordTry,
    KeyWordChar,
    KeyWordFinal,
    KeyWordInterface,
    KeyWordStatic,
    KeyWordVoid,
    KeyWordClass,
    KeyWordFinally,
    KeyWordLong,
    KeyWordStrictfp,
    KeyWordVolatile,
    KeyWordConst,
    KeyWordFloat,
    KeyWordNative,
    KeyWordSuper,
    KeyWordWhile,

    KeyWordString,
    KeyWordSystem,
    KeyWordOut,
    KeyWordPrintln, ;

    fun isKeyWord(): Boolean {
        return when (this) {
            TokenType.KeyWordAbstract,
            TokenType.KeyWordContinue,
            TokenType.KeyWordFor,
            TokenType.KeyWordNew,
            TokenType.KeyWordSwitch,
            TokenType.KeyWordAssert,
            TokenType.KeyWordDefault,
            TokenType.KeyWordGoto,
            TokenType.KeyWordPackage,
            TokenType.KeyWordSynchronized,
            TokenType.KeyWordBoolean,
            TokenType.KeyWordDo,
            TokenType.KeyWordIf,
            TokenType.KeyWordPrivate,
            TokenType.KeyWordThis,
            TokenType.KeyWordBreak,
            TokenType.KeyWordDouble,
            TokenType.KeyWordImplements,
            TokenType.KeyWordProtected,
            TokenType.KeyWordThrow,
            TokenType.KeyWordByte,
            TokenType.KeyWordElse,
            TokenType.KeyWordImport,
            TokenType.KeyWordPublic,
            TokenType.KeyWordThrows,
            TokenType.KeyWordCase,
            TokenType.KeyWordEnum,
            TokenType.KeyWordInstanceof,
            TokenType.KeyWordReturn,
            TokenType.KeyWordTransient,
            TokenType.KeyWordCatch,
            TokenType.KeyWordExtends,
            TokenType.KeyWordInt,
            TokenType.KeyWordShort,
            TokenType.KeyWordTry,
            TokenType.KeyWordChar,
            TokenType.KeyWordFinal,
            TokenType.KeyWordInterface,
            TokenType.KeyWordStatic,
            TokenType.KeyWordVoid,
            TokenType.KeyWordClass,
            TokenType.KeyWordFinally,
            TokenType.KeyWordLong,
            TokenType.KeyWordStrictfp,
            TokenType.KeyWordVolatile,
            TokenType.KeyWordConst,
            TokenType.KeyWordFloat,
            TokenType.KeyWordNative,
            TokenType.KeyWordSuper,
            TokenType.KeyWordWhile,
            TokenType.KeyWordString,
            TokenType.KeyWordSystem,
            TokenType.KeyWordOut,
            TokenType.KeyWordPrintln -> true

            else -> false
        }
    }

    fun isBracket(): Boolean {
        return when (this) {
            BracketRoundOpen,
            BracketRoundClose,
            BracketSquareOpen,
            BracketSquareClose,
            BracketCurlyOpen,
            BracketCurlyClose -> true

            else -> false
        }
    }
}