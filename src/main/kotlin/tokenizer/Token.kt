package tokenizer

class Token(val type: TokenType, val beginIndex : Int, val endIndex : Int, val value: String? = null) {
//class Token(val type: TokenType, val value: String? = null) {
    override fun toString(): String {
        return if (value == null) type.toString() else "${type}:${value}"
    }

    fun getDisplayValue():String{
        if(value!=null) return value;
        return when(type){
            TokenType.NotDefined -> "TODO()"
            TokenType.EOF -> "TODO()"
            TokenType.InvalidSyntax -> "TODO()"
            TokenType.Whitespace -> "TODO()"
            TokenType.NewLine -> "TODO()"
            TokenType.Comment -> "TODO()"
            TokenType.NameIdentifier -> "TODO()"
            TokenType.BracketRoundOpen -> "("
            TokenType.BracketRoundClose -> ")"
            TokenType.BracketSquareOpen -> "["
            TokenType.BracketSquareClose -> "]"
            TokenType.BracketCurlyOpen -> "{"
            TokenType.BracketCurlyClose -> "}"
            TokenType.SymbolDot -> "."
            TokenType.SymbolComma -> ","
            TokenType.SymbolSemicolon -> ";"
            TokenType.SymbolColon -> ":"
            TokenType.OperatorEquals -> "TODO()"
            TokenType.OperatorNotEquals -> "TODO()"
            TokenType.OperatorLessOrEqual -> "TODO()"
            TokenType.OperatorMoreOrEqual -> "TODO()"
            TokenType.OperatorDecrement -> "TODO()"
            TokenType.OperatorIncrement -> "TODO()"
            TokenType.OperatorMinusAssign -> "TODO()"
            TokenType.OperatorPlusAssign -> "TODO()"
            TokenType.OperatorMultAssign -> "TODO()"
            TokenType.OperatorDivAssign -> "TODO()"
            TokenType.OperatorAnd -> "TODO()"
            TokenType.OperatorOr -> "TODO()"
            TokenType.OperatorNot -> "TODO()"
            TokenType.OperatorAssign -> "="
            TokenType.OperatorLess -> "TODO()"
            TokenType.OperatorMore -> "TODO()"
            TokenType.OperatorPlus -> "+"
            TokenType.OperatorMinus -> "-"
            TokenType.OperatorDiv -> "/"
            TokenType.OperatorMult -> "*"
            TokenType.LiteralString -> "TODO()"
            TokenType.LiteralNumber -> "TODO()"
            TokenType.LiteralChar -> "TODO()"
            TokenType.LiteralTrue -> "TODO()"
            TokenType.LiteralFalse -> "TODO()"
            TokenType.LiteralNull -> "TODO()"
            TokenType.KeyWordAbstract -> "TODO()"
            TokenType.KeyWordContinue -> "TODO()"
            TokenType.KeyWordFor -> "TODO()"
            TokenType.KeyWordNew -> "TODO()"
            TokenType.KeyWordSwitch -> "TODO()"
            TokenType.KeyWordAssert -> "TODO()"
            TokenType.KeyWordDefault -> "TODO()"
            TokenType.KeyWordGoto -> "TODO()"
            TokenType.KeyWordPackage -> "TODO()"
            TokenType.KeyWordSynchronized -> "TODO()"
            TokenType.KeyWordBoolean -> "TODO()"
            TokenType.KeyWordDo -> "TODO()"
            TokenType.KeyWordIf -> "TODO()"
            TokenType.KeyWordPrivate -> "TODO()"
            TokenType.KeyWordThis -> "TODO()"
            TokenType.KeyWordBreak -> "TODO()"
            TokenType.KeyWordDouble -> "TODO()"
            TokenType.KeyWordImplements -> "TODO()"
            TokenType.KeyWordProtected -> "TODO()"
            TokenType.KeyWordThrow -> "TODO()"
            TokenType.KeyWordByte -> "TODO()"
            TokenType.KeyWordElse -> "TODO()"
            TokenType.KeyWordImport -> "TODO()"
            TokenType.KeyWordPublic -> "TODO()"
            TokenType.KeyWordThrows -> "TODO()"
            TokenType.KeyWordCase -> "TODO()"
            TokenType.KeyWordEnum -> "TODO()"
            TokenType.KeyWordInstanceof -> "TODO()"
            TokenType.KeyWordReturn -> "TODO()"
            TokenType.KeyWordTransient -> "TODO()"
            TokenType.KeyWordCatch -> "TODO()"
            TokenType.KeyWordExtends -> "TODO()"
            TokenType.KeyWordInt -> "TODO()"
            TokenType.KeyWordShort -> "TODO()"
            TokenType.KeyWordTry -> "TODO()"
            TokenType.KeyWordChar -> "TODO()"
            TokenType.KeyWordFinal -> "TODO()"
            TokenType.KeyWordInterface -> "TODO()"
            TokenType.KeyWordStatic -> "TODO()"
            TokenType.KeyWordVoid -> "TODO()"
            TokenType.KeyWordClass -> "TODO()"
            TokenType.KeyWordFinally -> "TODO()"
            TokenType.KeyWordLong -> "TODO()"
            TokenType.KeyWordStrictfp -> "TODO()"
            TokenType.KeyWordVolatile -> "TODO()"
            TokenType.KeyWordConst -> "TODO()"
            TokenType.KeyWordFloat -> "TODO()"
            TokenType.KeyWordNative -> "TODO()"
            TokenType.KeyWordSuper -> "TODO()"
            TokenType.KeyWordWhile -> "TODO()"
            TokenType.KeyWordString -> "TODO()"
            TokenType.KeyWordSystem -> "TODO()"
            TokenType.KeyWordOut -> "TODO()"
            TokenType.KeyWordPrintln -> "TODO()"
        }
    }
    companion object {
        val EOF: Token = Token(TokenType.EOF, 0,0)
    }
}